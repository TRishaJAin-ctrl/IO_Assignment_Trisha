BT=1 :
	INORDER : D B G E H A C F 
	PREORDER : A B D E G H C F
	POSTORDER : D G H E B F C A
	LEVELORDER : A B C D E F G H 

BT=2 : 
	INORDER : H D B E A F C G
	PREORDER : A B D H E C F G
	POSTORDER : H D E B F G C A
	LEVELORDER : A B C D E F G H 
	
						_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

HASH TABLES:- 
	Hashing is a technique that is used to uniquely identify a specific object from a 
	group of similar objects. 
	Assume that you have an object and you want to assign a key to it to make searching 
	easy. To store the key/value pair, you can use a simple array like a data structure
	 where keys (integers) can be used directly as an index to store values. However, in
	  cases where the keys are large and cannot be used directly as an index, you should 
	  use hashing.

In hashing, large keys are converted into small keys by using hash functions. The values
 are then stored in a data structure called hash table. The idea of hashing is to 
 distribute entries (key/value pairs) uniformly across an array. Each element is assigned 
 a key (converted key). By using that key you can access the element in O(1) time. Using
 the key, the algorithm (hash function) computes an index that suggests where an entry
 can be found or inserted.

Hashing is implemented in two steps:

1.An element is converted into an integer by using a hash function. This element can be 
used as an index to store the original element, which falls into the hash table.
2.The element is stored in the hash table where it can be quickly retrieved using hashed
 key.

hash = hashfunc(key)
index = hash % array_size
In this method, the hash is independent of the array size and it is then reduced to an 
index (a number between 0 and array_size âˆ’ 1) by using the modulo operator (%).

Hash function :
A hash function is any function that can be used to map a data set of an arbitrary size 
to a data set of a fixed size, which falls into the hash table. The values returned by a 
hash function are called hash values, hash codes, hash sums, or simply hashes.

To achieve a good hashing mechanism, It is important to have a good hash function with the
 following basic requirements:

1.Easy to compute: It should be easy to compute and must not become an algorithm in 
itself.

2.Uniform distribution: It should provide a uniform distribution across the hash table and 
should not result in clustering.

3.Less collisions: Collisions occur when pairs of elements are mapped to the same hash 
value. These should be avoided.

Hash table :
A hash table is a data structure that is used to store keys/value pairs. It uses a hash 
function to compute an index into an array in which an element will be inserted or 
searched. By using a good hash function, hashing can work well. Under reasonable 
assumptions, the average time required to search for an element in a hash table is O(1).



















